__author__ = "Martin Rippin"
__copyright__ = "Copyright 2021, Martin Rippin"
__email__ = "martin.rippin@igp.uu.se"
__license__ = "GPL-3"


include: "rules/common.smk"
include: "rules/cp_results.smk"
include: "rules/manta_to_tsv.smk"
include: "rules/mutectcaller_to_tsv.smk"


ruleorder: parabricks_pbrun_fq2bam > misc_samtools_index
ruleorder: cnv_sv_manta_run_workflow_t > misc_tabix
ruleorder: cnv_sv_manta_run_workflow_t > misc_bgzip
ruleorder: cp_pindel_tbi > misc_tabix
ruleorder: cp_manta_tbi > misc_tabix
ruleorder: cp_manta_all_tbi > misc_tabix
ruleorder: cp_manta_aml_tbi > misc_tabix
ruleorder: cp_tbi_t > misc_tabix
ruleorder: cp_all_tbi > misc_tabix
ruleorder: cp_aml_tbi > misc_tabix
ruleorder: cp_cnvkit_tbi > misc_tabix
ruleorder: cp_crai > misc_samtools_index
ruleorder: cp_cnvkit_diagram > misc_imagemagick_convert


rule all:
    input:
        unpack(compile_output_list),


module annotation:
    snakefile:
        github(
            "hydra-genetics/annotation",
            path="workflow/Snakefile",
            tag=config["modules"]["annotation"],
        )
    config:
        config


use rule * from annotation as annotation_*


use rule vep from annotation as annotation_vep with:
    input:
        vcf="parabricks/pbrun_mutectcaller_t/{sample}_T.vcf.gz",
        tabix="parabricks/pbrun_mutectcaller_t/{sample}_T.vcf.gz.tbi",
        cache=config["vep"]["vep_cache"],
        fasta=config["reference"]["fasta"],
    output:
        vcf="parabricks/pbrun_mutectcaller_t/{sample}_T.vep.vcf",
    log:
        "parabricks/pbrun_mutectcaller_t/{sample}_T.vep.vcf.log",
    benchmark:
        repeat(
            "parabricks/pbrun_mutectcaller_t/{sample}_T.vep.vcf.benchmark.tsv",
            config.get("vep", {}).get("benchmark_repeats", 1),
        )
    message:
        "{rule}: Annotate {input.vcf}"


use rule simple_sv_annotation from annotation as annotation_simple_sv_annotation with:
    input:
        vcf="cnv_sv/manta_run_workflow_t/{sample}/results/variants/tumorSV.snpeff.vcf.gz",
        panel=config["simple_sv_annotation"]["panel"],
        fusion_pairs=config["simple_sv_annotation"]["fusion_pairs"],
    output:
        vcf="cnv_sv/manta_run_workflow_t/{sample}.ssa.vcf",
    log:
        "cnv_sv/manta_run_workflow_t/{sample}.ssa.vcf.log",
    benchmark:
        repeat(
            "cnv_sv/manta_run_workflow_t/{sample}.ssa.vcf.benchmark.tsv",
            config.get("snpeff", {}).get("benchmark_repeats", 1),
        )
    message:
        "{rule}: Annotate {input.vcf}"


module filtering:
  snakefile:
    github(
        'hydra-genetics/filtering',
        path='workflow/Snakefile',
        tag='b7f4dc3',
    )
  config: config


use rule * from filtering as filtering_*


module cnv_sv:
    snakefile:
        github(
            "hydra-genetics/cnv_sv",
            path="workflow/Snakefile",
            tag=config["modules"]["cnv_sv"],
        )
    config:
        config


use rule * from cnv_sv as cnv_sv_*


use rule cnvkit_batch from cnv_sv as cnv_sv_cnvkit_batch with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_T.bam",
        bai="parabricks/pbrun_fq2bam/{sample}_T.bam.bai",
        cnv_reference=config["cnvkit_batch"]["normal_reference"],


use rule cnvkit_call from cnv_sv as cnv_sv_cnvkit_call with:
    input:
        segment="cnv_sv/cnvkit_batch/{sample}/{sample}_{type}.cns",
        vcf="parabricks/pbrun_mutectcaller_t/{sample}_{type}.vep.filter.germline.vcf",
    output:
        segment="cnv_sv/cnvkit_call/{sample}_{type}.loh.cns",


use rule cnvkit_scatter from cnv_sv as cnv_sv_cnvkit_scatter with:
    input:
        segments="cnv_sv/cnvkit_batch/{sample}/{sample}_{type}.cns",
        segment_regions="cnv_sv/cnvkit_batch/{sample}/{sample}_{type}.cnr",
        vcf="parabricks/pbrun_mutectcaller_t/{sample}_{type}.vep.filter.germline.vcf",
    output:
        plot="cnv_sv/cnvkit_scatter/{sample}_{type}_{locus}.png",
    log:
        "cnv_sv/cnvkit_scatter/{sample}_{type}_{locus}.log",
    benchmark:
        repeat(
            "cnv_sv/cnvkit_scatter/{sample}_{type}_{locus}.benchmark.tsv",
            config.get("cnvkit_scatter", {}).get("benchmark_repeats", 1),
        )


use rule cnvkit_vcf from cnv_sv as cnv_sv_cnvkit_vcf with:
    output:
        vcf="cnv_sv/cnvkit_vcf/{sample}_{type}.vcf",


use rule config_manta_t from cnv_sv as cnv_sv_config_manta_t with:
    input:
        bam_t="parabricks/pbrun_fq2bam/{sample}_T.bam",
        bai_t="parabricks/pbrun_fq2bam/{sample}_T.bam.bai",
        ref=config["reference"]["fasta"],


use rule generate_pindel_config from cnv_sv as cnv_sv_generate_pindel_config with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_T.bam",
        metrics="qc/picard_collect_multiple_metrics/{sample}_T.insert_size_metrics",


use rule manta_run_workflow_t from cnv_sv as cnv_sv_manta_run_workflow_t with:
    input:
        bam_t="parabricks/pbrun_fq2bam/{sample}_T.bam",
        bai_t="parabricks/pbrun_fq2bam/{sample}_T.bam.bai",
        ref=config["reference"]["fasta"],
        scrpt="cnv_sv/manta_run_workflow_t/{sample}/runWorkflow.py",
    output:
        tum_sv_vcf="cnv_sv/manta_run_workflow_t/{sample}/results/variants/tumorSV.vcf.gz",
        tum_sv_tbi="cnv_sv/manta_run_workflow_t/{sample}/results/variants/tumorSV.vcf.gz.tbi",


use rule pindel_call from cnv_sv as cnv_sv_pindel_call with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_T.bam",
        bai="parabricks/pbrun_fq2bam/{sample}_T.bam.bai",
        config="cnv_sv/pindel/{sample}.cfg",
        ref=config["reference"]["fasta"],


use rule pindel2vcf from cnv_sv as cnv_sv_pindel2vcf with:
    output:
        vcf="cnv_sv/pindel/{sample}.vcf",


module compression:
    snakefile:
        github(
            "hydra-genetics/compression",
            path="workflow/Snakefile",
            tag=config["modules"]["compression"],
        )
    config:
        config


use rule * from compression as compression_*


use rule crumble from compression as compression_crumble with:
    output:
        crum="compression/crumble/{file}.crumble.cram",


use rule samtools_view from compression as compression_samtools_view with:
    input:
        bam="parabricks/pbrun_fq2bam/{file}.bam",
        bai="parabricks/pbrun_fq2bam/{file}.bam.bai",
        ref=config.get("reference", {}).get("fasta", ""),


use rule spring from compression as compression_spring with:
    output:
        spring="compression/spring/{sample}_{flowcell}_{lane}_{barcode}_{type}.spring",


module parabricks:
    snakefile:
        github(
            "hydra-genetics/parabricks",
            path="workflow/Snakefile",
            tag=config["modules"]["parabricks"],
        )
    config:
        config


use rule * from parabricks as parabricks_*


module prealignment:
    snakefile:
        github(
            "hydra-genetics/prealignment",
            path="workflow/Snakefile",
            tag=config["modules"]["prealignment"],
        )
    config:
        config


use rule * from prealignment as prealignment_*


module qc:
    snakefile:
        github("hydra-genetics/qc", path="workflow/Snakefile", tag=config["modules"]["qc"])
    config:
        config


use rule * from qc as qc_*


use rule mosdepth from qc as qc_mosdepth with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        bai="parabricks/pbrun_fq2bam/{sample}_{type}.bam.bai",


use rule multiqc from qc as qc_multiqc with:
    output:
        html="qc/multiqc/multiqc_{report}.html",
        directory=directory("qc/multiqc/multiqc_{report}_data"),


use rule picard_collect_alignment_summary_metrics from qc as qc_picard_alignment_summary_metrics with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],


use rule picard_collect_duplication_metrics from qc as qc_picard_duplication_metrics with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",


use rule picard_collect_gc_bias_metrics from qc as qc_picard_collect_gc_bias_metrics with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],


use rule picard_collect_multiple_metrics from qc as qc_picard_collect_multiple_metrics with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],


use rule picard_collect_wgs_metrics from qc as qc_picard_collect_wgs_metrics with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],
        interval=config["reference"]["wgs_intervals"],


use rule samtools_stats from qc as qc_samtools_stats with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",


module misc:
    snakefile:
        github("hydra-genetics/misc", path="workflow/Snakefile", tag=config["modules"]["misc"])
    config:
        config


use rule * from misc as misc_*


use rule bedtools_intersect from misc as misc_bedtools_intersect with:
    output:
        vcf="{module}/{caller}/{file}.{bed}.vcf",


use rule imagemagick_convert from misc as misc_imagemagick_convert with:
    output:
        png="{file}.png",


use rule samtools_index from misc as misc_samtools_index with:
    input:
        cram="{file}.crumble.cram",
    output:
        crai="{file}.crumble.cram.crai",
    params:
        extra=config.get("extra", {}).get("extra", ""),
    log:
        "{file}.crumble.cram.crai.log",
    benchmark:
        repeat(
            "{file}.crumble.cram.crai.benchmark.tsv",
            config.get("samtools_index", {}).get("benchmark_repeats", 1),
        )
    message:
        "{rule}: Index {wildcards.file}.crumble.cram file"
